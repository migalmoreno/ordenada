# -*- mode: org; org-html-head-include-default-style: nil; org-html-postamble: nil; org-export-with-author: nil; org-export-with-date: nil; -*-
#+OPTIONS: toc:nil num:nil
#+title: ordenada
Ordenada is a configuration framework based on the [[https://nixos.org/][Nix]] package manager that aims to make it easy to build reproducible development environments. It draws inspiration from the [[https://git.sr.ht/~abcdw/rde][RDE]] project for [[https://guix.gnu.org/][GNU Guix]].

Ordenada is centered around features, which are blocks of configuration that provide certain functionality for one or many "classes" (NixOS, Home Manager, Darwin, etc.), such as setting up your email, adding your GnuPG keys, or configuring your window manager. Normally, all you need to do is enable the features and sane defaults will be configured for you, but you can check the [[https://migalmoreno.com/projects/ordenada.html#configuration-options][full list of features and options]] to fit your needs.

#+begin_quote
NOTE: Ordenada is in current development and its API is subject to change
#+end_quote

* Installation
The recommended way to install Ordenada is via [[https://nix.dev/concepts/flakes.html][Flakes]]. Add a new input for it as follows:

#+begin_src nix
{
  inputs = {
    ordenada.url = "github:migalmoreno/ordenada";
  };
}
#+end_src

** NixOS
For NixOS systems, add the list of Ordenada NixOS modules:

#+begin_src nix
{
  outputs =
    { nixpkgs, ordenada, ... }:
    {
      nixosConfigurations."<hostname>" = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ordenada.nixosModules.ordenada
        ];
      };
    };
}
#+end_src

From here on, you can enable and configure the features in your system configuration, such as follows:

#+begin_src nix
{
  outputs =
    { nixpkgs, ordenada, ... }:
    {
      nixosConfigurations."<hostname>" = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ordenada.nixosModules.ordenada
          {
            ordenada.features = {
              userInfo = {
                enable = true;
                username = "myuser";
              };
              theme.enable = true;
              gnupg.enable = true;
              mail = {
                enable = true;
                accounts.personal = {
                  primary = true;
                  fqda = "user@example.com";
                };
              };
            };
          }
        ];
      };
    };
}
#+end_src

If you use [[https://github.com/nix-community/home-manager][Home Manager]] in your NixOS system, you'll want to add Ordenada's home modules to your Home Manager imports and enable the =home= feature in your NixOS host so that all the Ordenada features added in your host get applied to your Home Manager user configuration.

#+begin_src nix
{
  outputs =
    { nixpkgs, ordenada, ... }:
    {
      nixosConfigurations."<hostname>" = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ordenada.nixosModules.ordenada
          {
            ordenada.features = {
              home.enable = true;
            };
            home-manager.users."<user>".imports = [
              ordenada.homeModules.ordenada
            ];
          }
        ];
      };
    };
}
#+end_src

If you want a particular Home Manager configuration to not inherit all the features from that host, you can disable the default behavior with the =home.applyFeaturesToAll= option set to =false= and create a new set of features for that Home Manager instance. Note that if this option is disabled you'll want to set =ordenada.features = osConfig.ordenada.features= in the Home Manager Configuration of users for which you still want the default behavior of inheriting from the host features.

#+begin_src nix
{
  outputs =
    { nixpkgs, ordenada, ... }:
    {
      nixosConfigurations."<hostname>" = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ordenada.nixosModules.ordenada
          {
            ordenada.features = {
              home = {
                enable = true;
                applyFeaturesToAll = false;
              };
            };
            home-manager.users = {
              "<user1>".imports = [
                ordenada.homeModules.ordenada
                ({ osConfig, ... }: {
                  ordenada.features = osConfig.ordenada.features;
                })
              ];
              "<user2>".imports = [
                ordenada.homeModules.ordenada
                ({ osConfig, ... }: {
                  ordenada.features = {
                    # new feature set
                  };
                })
              ];
            };
          }
        ];
      };
    };
}
#+end_src

** Foreign Distributions / Home Manager
First make sure to install the Nix package manager as per [[https://nixos.org/download/][its download page]].

#+begin_src sh
$ sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon
#+end_src

Then follow the instructions in [[https://nix-community.github.io/home-manager/index.xhtml#ch-nix-flakes][Home Manager installation instructions for flakes]]. Namely, add the following line to =/etc/nix/nix.conf=:

#+begin_src conf
experimental-features = nix-command flakes
#+end_src

Restart the Nix daemon with =sudo systemctl restart nix-daemon.service=. You might also need to restart the shell to get access to the =nix= command.

Now run the Home Manager =init= command for your logged-in user to prepare an initial configuration.

#+begin_src sh
nix run home-manager/master -- init --switch
#+end_src

Which will generate a =flake.nix= and a =home.nix= in the =~/.config/home-manager= directory (it will create it if it does not exist).

Now, edit your =~/.config/home-manager/flake.nix=. Specify the source of Ordenada in the =inputs= section and add a new =ordenada= argument in the =outputs= section and the list of its home modules (=ordenada.homeModules.ordenada=) in =modules= afterwards.

#+name: ~/.config/home-manager/flake.nix
#+begin_src nix
{
  description = "Home Manager configuration for <your_user>";

  inputs = {
    # Specify the source of Home Manager and Nixpkgs.
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Specify the source of Ordenada.
    ordenada.url = "github:migalmoreno/ordenada";
  };

  outputs =
    { nixpkgs, home-manager, ordenada, ... }:
    let system = "x86_64-linux";
        pkgs = nixpkgs.legacyPackages.${system};
    in
      {
        homeConfigurations."<your_user>".home-manager.lib.homeManagerConfiguration {
          inherit pkgs;

          # Specify your home configuration modules here, for example,
          # the path to your home.nix.
          modules = [ ./home.nix ordenada.homeModules.ordenada ];

          # Optionally use extraSpecialArgs
          # to pass through arguments to home.nix
        };
      };
}
#+end_src

Now edit your =~/.config/home-manager/home.nix= and add the Ordenada features that you're interested in. For a complete example, see the [[file:examples/hm.nix][hm.nix]] example file.

Remove all the boilerplate in =~/.config/home-manager/home.nix= except for the =home.stateVersion= line and replace it with =ordenada.features=.

#+name: ~/.config/home-manager/home.nix
#+begin_src nix
{ config, pkgs, ... }:

{
  ordenada.features = {
    userInfo = {
      enable = true;
      username = "<your_user>";
    };
    bash.enable = true;
    home.enable = true;
    theme = {
      enable = true;
      polarity = "dark";
    };
    fontutils.enable = true;
    keyboard.enable = true;
    emacs = {
      enable = true;
      appearance.enable = true;
      modus-themes.enable = true;
      # ...
    };
    # ...
  };
  home.stateVersion = "<version>"; # Keep this line
}
#+end_src

And now run again:

#+begin_src sh
home-manager switch
#+end_src

Note you might get a warning about adding the =-b backup= flag in order to prevent clashes with already existing files.

After this, close the current shell and open a new one, which should now be Bash (since we've enabled the =bash= feature) above. You can now invoke:

#+begin_src sh
emacs
#+end_src

And it should open a new Emacs window with the Ordenada Emacs configuration.

* Adding features
To add a new Ordenada feature you'll need to create a new file inside =./modules= and use the =mkFeature= utility to define the feature. An example is shown below:

#+begin_src nix
{ lib, mkFeature, ... }:

mkFeature {
  name = "example";
  options = {
    message = lib.mkOption {
      type = lib.types.str;
      description = "The message to show.";
      default = "";
    };
  };
  globals = { config, ... }: {
    greeter = config.ordenada.features.example.message;
  };
  nixos = {
    environment.sessionVariables = {
      EXAMPLE_ENV = "test";
    };
  };
  homeManager = { pkgs, ... }: {
    home.packages = [ pkgs.hello ];
  };
  darwin = {
    homebrew.enable = true;
  };
}
#+end_src

The feature =name= can be either a string or a list of strings (e.g. =["emacs" "appearance"]=) which will be used to define the =ordenada.features.<feature_name>= option in all class modules.

The feature =options= are a set of options specific to this feature and =globals= is a set of globals that will dictate "global" Ordenada behavior (e.g. set the preferred editor to ="emacs"= in the Emacs feature). Both =options= and =globals= (i.e. =ordenada.features.<feature_name>.<option>= and =ordenada.globals.<global>=) will be applied in the modules of each class configuration defined next.

Finally, there's the class configurations (=nixos=, =homeManager=, =darwin=) which each take a module with class-specific settings that will only be activated if the feature is enabled via the =ordenada.featurers.<feature_name>.enable= option in the corresponding class configuration.

* Community
Join the =#ordenada= IRC channel at [[https://libera.chat/][Libera.Chat]] for general project support.

* Configuration Options
See [[https://migalmoreno.com/projects/ordenada.html#configuration-options][the project's homepage]] for the full list of configuration options.
